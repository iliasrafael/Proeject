/* Structs.h */
#include <stdint.h>
#define N 100
#define BufferSize 100

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
bool OK_SUCCESS;
///////////////////////////////////////////////////////////////////////////////
/* LIST NODE*/
///////////////////////////////////////////////////////////////////////////////
class list_node {                          
	uint32_t neighbor[N];                 
	uint32_t edgeProperty[N];            
	unsigned int offset;
public:
	uint32_t* getNeighbors();
	uint32_t* getProperties();
	unsigned int getNext();	            
};								       
///////////////////////////////////////////////////////////////////////////////
/* BUFFER */
///////////////////////////////////////////////////////////////////////////////
class Buffer{
	list_node *cells;
	unsigned int last;
	unsigned int size;
public:
	Buffer();
	unsigned int allocNewNode(); //den tin ekana
	list_node* getListNode(unsigned int);
	unsigned int getLast();
	unsigned int getSize();
	bool destroyBuffer();
};
///////////////////////////////////////////////////////////////////////////////
/* NODE INDEX */
///////////////////////////////////////////////////////////////////////////////
class NodeIndex {
	unsigned int* Nodes;
public:
	NodeIndex* createNodeIndex();
	bool InsertNode(uint32_t id);
	unsigned int getListHead(uint32_t id);
	bool destroyNodeIndex();
};
///////////////////////////////////////////////////////////////////////////////
/* GRAPH */
///////////////////////////////////////////////////////////////////////////////
class Graph{
	NodeIndex * inc_index;
	NodeIndex * out_index;
	Buffer * inc_buffer;
	Buffer * out_buffer;
public:

};

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
